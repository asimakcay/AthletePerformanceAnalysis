library(readxl) 
veri1 <- read_excel("C:/veri1.xls") 
View(veri1) 

library(dplyr)
library(ggplot2) 
library(corrplot)  

if (!requireNamespace("reshape2", quietly = TRUE)) { 
  install.packages("reshape2")
}
library(reshape2)

head(veri1)

Removing missing values
data <- na.omit(veri1)

Simple Linear Regression Model: spike ~ height + weight
model <- lm(spike ~ height + weight, data = veri1)

Summary of the model
summary(model)

Graphical representation of the model for height
ggplot(data, aes(x = height, y = spike)) +
geom_point() +
geom_smooth(method = "lm", col = "red")

Graphical representation of the model for weight
ggplot(data, aes(x = weight, y = spike)) +
geom_point() +
geom_smooth(method = "lm", col = "blue")

Calculate the correlation matrix for selected columns
correlation_matrix <- cor(veri1[, c("height", "weight", "spike")])
print(correlation_matrix)

Display the correlation matrix using corrplot
corrplot(correlation_matrix, method = "circle")

Checking if the regression residuals have a normal distribution
qqnorm(model$residuals)
qqline(model$residuals, col = "red")

Detection of outliers
for(column in colnames(veri1)) {
if(is.numeric(veri1[[column]])) {
Q1 <- quantile(veri1[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(veri1[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
outliers <- sum(veri1[[column]] < lower_bound | veri1[[column]] > upper_bound, na.rm = TRUE)
cat(column, "için aykırı değer sayısı:", outliers, "\n")
}
}

Melt numerical data for visualization
numerics <- veri1 %>% select_if(is.numeric)
long_numerics <- melt(numerics, id.vars = NULL)

Boxplot of numerical variables
ggplot(long_numerics, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Boxplot of Numerical Variables", x = "Variables", y = "Values")
